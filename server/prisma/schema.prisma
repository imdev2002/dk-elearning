// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  username       String?
  firstName      String?
  lastName       String?
  gender         String?
  password       String?
  salt           String?
  roles          UserRole[]
  phone          String?
  avatar         String?
  birthday       DateTime?
  isVerified     Boolean    @default(false)
  verifyCode     String?
  platform       Platform
  refreshToken   String?
  firstTime      Boolean    @default(true) // false if sent first time public profile email
  isNewUser      Boolean    @default(true) // new user flag
  syncWithGoogle Boolean    @default(false)

  timestamp DateTime @default(now())

  comments Comment[]
  emojis   Emoji[]
  hearts   Heart[]

  lessons Lesson[]
  courses Course[]

  coursedPaid CoursedPaid[]
  submitForms SubmitForm[]
  rating      Rating[]
  bookmarks   Bookmark[]
  lessonDones LessonDone[]
  courseDones CourseDone[]

  lastReset DateTime?
  cart      Cart?
}

model Role {
  id          Int        @id @default(autoincrement())
  name        RoleEnum   @unique
  description String
  userRole    UserRole[]
}

enum RoleEnum {
  USER
  ADMIN
  AUTHOR
}

enum Platform {
  GOOGLE
  LOCAL
}

enum LessonStatus {
  UPLOADING
  UPLOADED
  UPLOADING_TO_YOUTUBE
  PENDING
  APPROVED
}

enum CourseStatus {
  DRAFT
  PENDING
  APPROVED
}

model UserRole {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

enum LessonType {
  VIDEO
  TEXT
}

model Lesson {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())

  lessonName   String
  lessonNumber Int

  lessonType LessonType @default(VIDEO)

  trialAllowed  Boolean @default(false)
  descriptionMD String?

  status LessonStatus

  title   String?
  content String?

  localPath     String?
  thumbnailPath String?
  filename      String?
  duration      Float?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  comments    Comment[]
  emojis      Emoji[]
  hearts      Heart[]
  bookmarks   Bookmark[]
  part        Part         @relation(fields: [partId], references: [id])
  partId      Int
  lessonDones LessonDone[]
}

enum Currency {
  USD
  EUR
}

enum CourseCategory {
  DEVELOPMENT
  BUSINESS
  DESIGN
  MARKETING
  IT
  PERSONAL_DEVELOPMENT
  PHOTOGRAPHY
  MUSIC
  HEALTH
  FITNESS
  LIFESTYLE
  TEACHING
  ACADEMICS
  LANGUAGE
  OTHER
}

model Course {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())

  totalLesson     Int
  totalPart       Int
  courseName      String
  totalDuration   Float
  knowledgeGained String[]
  isPublic        Boolean      @default(false)
  status          CourseStatus @default(DRAFT)

  avgRating   Float?
  totalRating Int    @default(0)

  thumbnail String

  category CourseCategory

  priceAmount Float    @default(0)
  currency    Currency @default(USD)
  priceId     String?
  productId   String?

  descriptionMD String?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  // lessons      Lesson[]
  comments Comment[]
  emojis   Emoji[]
  hearts   Heart[]
  parts    Part[]

  coursedPaid    CoursedPaid[]
  rating         Rating[]
  bookmarks      Bookmark[]
  courseDones    CourseDone[]
  coursesOnCarts CoursesOnCarts[]
}

enum CoursedPaidStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}

model CoursedPaid {
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  checkoutSessionId String?
  status            CoursedPaidStatus @default(PENDING)

  @@id([courseId, userId])
}

model Cart {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  coursesOnCarts CoursesOnCarts[]
}

model CoursesOnCarts {
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  addedAt DateTime @default(now())

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  @@id([courseId, cartId])
}

model Part {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  partNumber  Int
  partName    String
  description String?

  lessons Lesson[]

  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  timestamp DateTime @default(now())

  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId Int?
  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  level    Int       @default(0)
  parentId Int?
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children Comment[] @relation("CommentToComment")
}

model Emoji {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())

  emoji   EmojiIcon @relation(fields: [emojiId], references: [id])
  emojiId Int
  user    User      @relation(fields: [userId], references: [id])
  userId  Int

  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId Int?
  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?
}

model EmojiIcon {
  id          Int     @id @default(autoincrement())
  name        String
  emojiHandle String
  emojis      Emoji[]
}

model Heart {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId Int?
  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?
}

enum FormStatus {
  PENDING
  APPROVED
  REJECTED
}

model LessonDone {
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int

  @@id([userId, lessonId])
}

model CourseDone {
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int

  @@id([userId, courseId])
}

model SubmitForm {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  real_firstName String
  real_lastName  String

  selfie String?

  frontIdCard String?
  backIdCard  String?

  linkCV String?

  category CourseCategory @default(OTHER)

  status FormStatus @default(PENDING)
}

model Rating {
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  star Float @default(0)

  @@id([userId, courseId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId Int?
  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?
}
